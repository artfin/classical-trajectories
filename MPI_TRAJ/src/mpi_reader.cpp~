#include <mpi.h>

#include <iostream>
#include <sstream>

using namespace std;

// exiting tag
const int EXIT_TAG = 42;

int main( int argc, char* argv[] )
{
	MPI_Init( &argc, &argv );

	int world_rank;
	MPI_Comm_rank( MPI_COMM_WORLD, &world_rank );

	int world_size;
	MPI_Comm_size( MPI_COMM_WORLD, &world_size );

	// root 	
	if ( world_rank == 0 )
	{
		cout << "argc: " << argc << endl;
		
		for ( int i = 0; i < argc; i++ )
		{
			cout << "argv[" << i << "]: " << argv[i] << endl;
		}

		cout << "---------------------------------------------" << endl;

		if ( argc != 3 )
		{
			cerr << "USAGE: ./... (int) starting file number (int) ending file number" << endl;
		   	MPI_Finalize();
			
			exit( 1 );	
		}

		int start = atoi( argv[0] );
		int end = atoi( argv[1] );

		int curr_filenumber = start;

		// sending first message to slaves
		for ( int i = 1; i < world_size; i++ )
		{
			cout << "Root sends curr_filenumber = " << curr_filenumber << " to process " << i << endl;

			MPI_Send( curr_filenumber, 1, MPI_DOUBLE, i, 0, MPI_COMM_WORLD );
		   	curr_filenumber++;	
		}

		// killing slaves
		for ( int i = 1; i < world_size; i++ )
		{
			cout << "Root kills process " << i << endl;

			MPI_Send( curr_filenumber, 1, MPI_DOUBLE, i, EXIT_TAG, MPI_COMM_WORLD );
		}	
	}
	// slave
	else
	{
		// auxiliary variable to store status of message
		MPI_Status status;

		// current file to process
		int curr_filenumber;

		while ( true )
		{
			MPI_Recv( &curr_filenumber, 1, MPI_DOUBLE, 0, MPI_ANY_TAG, MPI_COMM_WORLD, &status);

			if ( status.MPI_TAG == EXIT_TAG )
			{
				cerr << "Process " << i << " exits work loop." << endl;
			}	

			cout << "Process " << i << " received: " << curr_filenumber << endl;
		}
	}


	MPI_Finalize();

	return 0;
}
